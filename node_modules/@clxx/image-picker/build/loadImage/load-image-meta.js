"use strict";
;
(function (factory) {
    'use strict';
    if (typeof define === 'function' && define.amd) {
        define(['./load-image'], factory);
    }
    else if (typeof module === 'object' && module.exports) {
        factory(require('./load-image'));
    }
    else {
        factory(window.loadImage);
    }
})(function (loadImage) {
    'use strict';
    var hasblobSlice = typeof Blob !== 'undefined' &&
        (Blob.prototype.slice ||
            Blob.prototype.webkitSlice ||
            Blob.prototype.mozSlice);
    loadImage.blobSlice =
        hasblobSlice &&
            function () {
                var slice = this.slice || this.webkitSlice || this.mozSlice;
                return slice.apply(this, arguments);
            };
    loadImage.metaDataParsers = {
        jpeg: {
            0xffe1: [],
            0xffed: []
        }
    };
    loadImage.parseMetaData = function (file, callback, options, data) {
        options = options || {};
        data = data || {};
        var that = this;
        var maxMetaDataSize = options.maxMetaDataSize || 262144;
        var noMetaData = !(typeof DataView !== 'undefined' &&
            file &&
            file.size >= 12 &&
            file.type === 'image/jpeg' &&
            loadImage.blobSlice);
        if (noMetaData ||
            !loadImage.readFile(loadImage.blobSlice.call(file, 0, maxMetaDataSize), function (e) {
                if (e.target.error) {
                    console.log(e.target.error);
                    callback(data);
                    return;
                }
                var buffer = e.target.result;
                var dataView = new DataView(buffer);
                var offset = 2;
                var maxOffset = dataView.byteLength - 4;
                var headLength = offset;
                var markerBytes;
                var markerLength;
                var parsers;
                var i;
                if (dataView.getUint16(0) === 0xffd8) {
                    while (offset < maxOffset) {
                        markerBytes = dataView.getUint16(offset);
                        if ((markerBytes >= 0xffe0 && markerBytes <= 0xffef) ||
                            markerBytes === 0xfffe) {
                            markerLength = dataView.getUint16(offset + 2) + 2;
                            if (offset + markerLength > dataView.byteLength) {
                                console.log('Invalid meta data: Invalid segment size.');
                                break;
                            }
                            parsers = loadImage.metaDataParsers.jpeg[markerBytes];
                            if (parsers) {
                                for (i = 0; i < parsers.length; i += 1) {
                                    parsers[i].call(that, dataView, offset, markerLength, data, options);
                                }
                            }
                            offset += markerLength;
                            headLength = offset;
                        }
                        else {
                            break;
                        }
                    }
                    if (!options.disableImageHead && headLength > 6) {
                        if (buffer.slice) {
                            data.imageHead = buffer.slice(0, headLength);
                        }
                        else {
                            data.imageHead = new Uint8Array(buffer).subarray(0, headLength);
                        }
                    }
                }
                else {
                    console.log('Invalid JPEG file: Missing JPEG marker.');
                }
                callback(data);
            }, 'readAsArrayBuffer')) {
            callback(data);
        }
    };
    loadImage.hasMetaOption = function (options) {
        return options && options.meta;
    };
    var originalTransform = loadImage.transform;
    loadImage.transform = function (img, options, callback, file, data) {
        if (loadImage.hasMetaOption(options)) {
            loadImage.parseMetaData(file, function (data) {
                originalTransform.call(loadImage, img, options, callback, file, data);
            }, options, data);
        }
        else {
            originalTransform.apply(loadImage, arguments);
        }
    };
});
