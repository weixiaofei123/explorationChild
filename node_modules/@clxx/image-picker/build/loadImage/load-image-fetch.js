"use strict";
;
(function (factory) {
    'use strict';
    if (typeof define === 'function' && define.amd) {
        define(['./load-image', './load-image-meta'], factory);
    }
    else if (typeof module === 'object' && module.exports) {
        factory(require('./load-image'), require('./load-image-meta'));
    }
    else {
        factory(window.loadImage);
    }
})(function (loadImage) {
    'use strict';
    if (typeof fetch !== 'undefined' && typeof Request !== 'undefined') {
        loadImage.fetchBlob = function (url, callback, options) {
            if (loadImage.hasMetaOption(options)) {
                fetch(new Request(url, options))
                    .then(function (response) {
                    return response.blob();
                })
                    .then(callback)
                    .catch(function (err) {
                    console.log(err);
                    callback();
                });
            }
            else {
                callback();
            }
        };
    }
    else if (typeof XMLHttpRequest !== 'undefined' &&
        typeof ProgressEvent !== 'undefined') {
        loadImage.fetchBlob = function (url, callback, options) {
            if (loadImage.hasMetaOption(options)) {
                options = options || {};
                var req = new XMLHttpRequest();
                req.open(options.method || 'GET', url);
                if (options.headers) {
                    Object.keys(options.headers).forEach(function (key) {
                        req.setRequestHeader(key, options.headers[key]);
                    });
                }
                req.withCredentials = options.credentials === 'include';
                req.responseType = 'blob';
                req.onload = function () {
                    callback(req.response);
                };
                req.onerror = req.onabort = req.ontimeout = function (e) {
                    console.log(e);
                    callback();
                };
                req.send(options.body);
            }
            else {
                callback();
            }
        };
    }
});
