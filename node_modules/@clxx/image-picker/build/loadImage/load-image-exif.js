"use strict";
;
(function (factory) {
    'use strict';
    if (typeof define === 'function' && define.amd) {
        define(['./load-image', './load-image-meta'], factory);
    }
    else if (typeof module === 'object' && module.exports) {
        factory(require('./load-image'), require('./load-image-meta'));
    }
    else {
        factory(window.loadImage);
    }
})(function (loadImage) {
    'use strict';
    loadImage.ExifMap = function () {
        return this;
    };
    loadImage.ExifMap.prototype.map = {
        Orientation: 0x0112
    };
    loadImage.ExifMap.prototype.get = function (id) {
        return this[id] || this[this.map[id]];
    };
    loadImage.getExifThumbnail = function (dataView, offset, length) {
        if (!length || offset + length > dataView.byteLength) {
            console.log('Invalid Exif data: Invalid thumbnail data.');
            return;
        }
        return loadImage.createObjectURL(new Blob([dataView.buffer.slice(offset, offset + length)]));
    };
    loadImage.exifTagTypes = {
        1: {
            getValue: function (dataView, dataOffset) {
                return dataView.getUint8(dataOffset);
            },
            size: 1
        },
        2: {
            getValue: function (dataView, dataOffset) {
                return String.fromCharCode(dataView.getUint8(dataOffset));
            },
            size: 1,
            ascii: true
        },
        3: {
            getValue: function (dataView, dataOffset, littleEndian) {
                return dataView.getUint16(dataOffset, littleEndian);
            },
            size: 2
        },
        4: {
            getValue: function (dataView, dataOffset, littleEndian) {
                return dataView.getUint32(dataOffset, littleEndian);
            },
            size: 4
        },
        5: {
            getValue: function (dataView, dataOffset, littleEndian) {
                return (dataView.getUint32(dataOffset, littleEndian) /
                    dataView.getUint32(dataOffset + 4, littleEndian));
            },
            size: 8
        },
        9: {
            getValue: function (dataView, dataOffset, littleEndian) {
                return dataView.getInt32(dataOffset, littleEndian);
            },
            size: 4
        },
        10: {
            getValue: function (dataView, dataOffset, littleEndian) {
                return (dataView.getInt32(dataOffset, littleEndian) /
                    dataView.getInt32(dataOffset + 4, littleEndian));
            },
            size: 8
        }
    };
    loadImage.exifTagTypes[7] = loadImage.exifTagTypes[1];
    loadImage.getExifValue = function (dataView, tiffOffset, offset, type, length, littleEndian) {
        var tagType = loadImage.exifTagTypes[type];
        var tagSize;
        var dataOffset;
        var values;
        var i;
        var str;
        var c;
        if (!tagType) {
            console.log('Invalid Exif data: Invalid tag type.');
            return;
        }
        tagSize = tagType.size * length;
        dataOffset =
            tagSize > 4
                ? tiffOffset + dataView.getUint32(offset + 8, littleEndian)
                : offset + 8;
        if (dataOffset + tagSize > dataView.byteLength) {
            console.log('Invalid Exif data: Invalid data offset.');
            return;
        }
        if (length === 1) {
            return tagType.getValue(dataView, dataOffset, littleEndian);
        }
        values = [];
        for (i = 0; i < length; i += 1) {
            values[i] = tagType.getValue(dataView, dataOffset + i * tagType.size, littleEndian);
        }
        if (tagType.ascii) {
            str = '';
            for (i = 0; i < values.length; i += 1) {
                c = values[i];
                if (c === '\u0000') {
                    break;
                }
                str += c;
            }
            return str;
        }
        return values;
    };
    loadImage.parseExifTag = function (dataView, tiffOffset, offset, littleEndian, data) {
        var tag = dataView.getUint16(offset, littleEndian);
        data.exif[tag] = loadImage.getExifValue(dataView, tiffOffset, offset, dataView.getUint16(offset + 2, littleEndian), dataView.getUint32(offset + 4, littleEndian), littleEndian);
    };
    loadImage.parseExifTags = function (dataView, tiffOffset, dirOffset, littleEndian, data) {
        var tagsNumber, dirEndOffset, i;
        if (dirOffset + 6 > dataView.byteLength) {
            console.log('Invalid Exif data: Invalid directory offset.');
            return;
        }
        tagsNumber = dataView.getUint16(dirOffset, littleEndian);
        dirEndOffset = dirOffset + 2 + 12 * tagsNumber;
        if (dirEndOffset + 4 > dataView.byteLength) {
            console.log('Invalid Exif data: Invalid directory size.');
            return;
        }
        for (i = 0; i < tagsNumber; i += 1) {
            this.parseExifTag(dataView, tiffOffset, dirOffset + 2 + 12 * i, littleEndian, data);
        }
        return dataView.getUint32(dirEndOffset, littleEndian);
    };
    loadImage.parseExifData = function (dataView, offset, length, data, options) {
        if (options.disableExif) {
            return;
        }
        var tiffOffset = offset + 10;
        var littleEndian;
        var dirOffset;
        var thumbnailData;
        if (dataView.getUint32(offset + 4) !== 0x45786966) {
            return;
        }
        if (tiffOffset + 8 > dataView.byteLength) {
            console.log('Invalid Exif data: Invalid segment size.');
            return;
        }
        if (dataView.getUint16(offset + 8) !== 0x0000) {
            console.log('Invalid Exif data: Missing byte alignment offset.');
            return;
        }
        switch (dataView.getUint16(tiffOffset)) {
            case 0x4949:
                littleEndian = true;
                break;
            case 0x4d4d:
                littleEndian = false;
                break;
            default:
                console.log('Invalid Exif data: Invalid byte alignment marker.');
                return;
        }
        if (dataView.getUint16(tiffOffset + 2, littleEndian) !== 0x002a) {
            console.log('Invalid Exif data: Missing TIFF marker.');
            return;
        }
        dirOffset = dataView.getUint32(tiffOffset + 4, littleEndian);
        data.exif = new loadImage.ExifMap();
        dirOffset = loadImage.parseExifTags(dataView, tiffOffset, tiffOffset + dirOffset, littleEndian, data);
        if (dirOffset && !options.disableExifThumbnail) {
            thumbnailData = { exif: {} };
            dirOffset = loadImage.parseExifTags(dataView, tiffOffset, tiffOffset + dirOffset, littleEndian, thumbnailData);
            if (thumbnailData.exif[0x0201]) {
                data.exif.Thumbnail = loadImage.getExifThumbnail(dataView, tiffOffset + thumbnailData.exif[0x0201], thumbnailData.exif[0x0202]);
            }
        }
        if (data.exif[0x8769] && !options.disableExifSub) {
            loadImage.parseExifTags(dataView, tiffOffset, tiffOffset + data.exif[0x8769], littleEndian, data);
        }
        if (data.exif[0x8825] && !options.disableExifGps) {
            loadImage.parseExifTags(dataView, tiffOffset, tiffOffset + data.exif[0x8825], littleEndian, data);
        }
    };
    loadImage.metaDataParsers.jpeg[0xffe1].push(loadImage.parseExifData);
});
