var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
export function waitUntil(condition, option) {
    return __awaiter(this, void 0, void 0, function* () {
        let config = {
            checkInterval: 50,
            checkMaxTimes: 200
        };
        if (typeof option === "object") {
            config = Object.assign(Object.assign({}, config), option);
        }
        return new Promise(resolve => {
            let checkTimes = 0;
            let lastResult = false;
            const inter = window.setInterval(() => {
                if (checkTimes >= config.checkMaxTimes) {
                    window.clearInterval(inter);
                    resolve(lastResult);
                    return;
                }
                lastResult = condition();
                if (lastResult) {
                    window.clearInterval(inter);
                    resolve(true);
                    return;
                }
                checkTimes++;
            }, config.checkInterval);
        });
    });
}
