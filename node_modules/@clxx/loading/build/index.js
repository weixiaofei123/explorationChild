var __rest = (this && this.__rest) || function (s, e) {
    var t = {};
    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)
        t[p] = s[p];
    if (s != null && typeof Object.getOwnPropertySymbols === "function")
        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {
            if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))
                t[p[i]] = s[p[i]];
        }
    return t;
};
import { jsx } from "@emotion/core";
import React from "react";
import ReactDOM from "react-dom";
import { WaveLoading } from "./WaveLoading";
import { HelixLoading } from "./HelixLoading";
import { style } from "./style";
import { FixContainer } from "@clxx/layout";
export class Loading {
    constructor(option = {}) {
        this.container = document.createElement("div");
        let { type = "helix", hint = undefined, showMask = false } = option, defaultProps = __rest(option, ["type", "hint", "showMask"]);
        let Component = null;
        type = type.toLowerCase();
        if (type === "wave") {
            Component = WaveLoading;
        }
        else if (type === "helix") {
            Component = HelixLoading;
        }
        else {
            throw new Error(`Invalid loading type '${type}'`);
        }
        let hintComponent = null;
        if (React.isValidElement(hint)) {
            hintComponent = hint;
        }
        else {
            hintComponent = hint ? (jsx("p", { css: style.hint, className: "cl-Loading-hint" }, hint)) : null;
        }
        document.body.appendChild(this.container);
        ReactDOM.render(jsx(FixContainer, Object.assign({}, defaultProps, { showMask: showMask }),
            jsx("div", { css: style.container, className: "cl-Loading-container" },
                jsx(Component, null),
                hintComponent)), this.container);
    }
    destroy() {
        ReactDOM.unmountComponentAtNode(this.container);
        this.container.remove();
    }
}
