import { useForceUpdate } from "./useForceUpdate";
import { useEffectOnce } from "./useEffectOnce";
import { useRef } from "react";
import { useUnmount } from "./useUnmount";
let globalUpdateIndex = 0;
let globalStateStore = new Map();
export function setGlobalState(key, value) {
    if (globalStateStore.has(key)) {
        const item = globalStateStore.get(key);
        if (item.state !== value) {
            item.state = value;
            globalStateStore.set(key, item);
            item.update.forEach(forceUpdate => {
                forceUpdate();
            });
        }
    }
    else {
        globalStateStore.set(key, {
            state: value,
            update: new Map()
        });
    }
}
export function getGlobalState(key) {
    if (globalStateStore.has(key)) {
        return globalStateStore.get(key).state;
    }
    return undefined;
}
function addUpdater(key, updater, updateIndex) {
    if (globalStateStore.has(key)) {
        const item = globalStateStore.get(key);
        item.update.set(updateIndex, updater);
    }
}
function removeUpdater(key, updateIndex) {
    if (globalStateStore.has(key)) {
        const item = globalStateStore.get(key);
        item.update.delete(updateIndex);
    }
}
export function useGlobalState(key) {
    const forceUpdate = useForceUpdate();
    const keyRef = useRef(key);
    const updateIndexRef = useRef(globalUpdateIndex);
    const setStateRef = useRef((newState) => {
        setGlobalState(keyRef.current, newState);
    });
    const state = getGlobalState(keyRef.current);
    useEffectOnce(() => {
        globalUpdateIndex += 1;
        updateIndexRef.current = globalUpdateIndex;
        addUpdater(keyRef.current, forceUpdate, updateIndexRef.current);
    });
    useUnmount(() => {
        removeUpdater(keyRef.current, updateIndexRef.current);
    });
    return [state, setStateRef.current];
}
